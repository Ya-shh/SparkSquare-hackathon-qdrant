generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id               String            @id @default(cuid())
  name             String?
  email            String?           @unique
  emailVerified    DateTime?
  username         String            @unique
  password         String
  image            String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  bio              String?
  location         String?
  website          String?
  reputation       Int               @default(0)
  lastLoginAt      DateTime          @default(now())
  loginStreak      Int               @default(0)
  role             String?           @default("User")
  accounts         Account[]
  Bookmark         Bookmark[]
  categories       Category[]
  CategoryFollow   CategoryFollow[]
  comments         Comment[]
  following        Follow[]          @relation("UserFollowing")
  followers        Follow[]          @relation("UserFollowers")
  notifications    Notification[]
  posts            Post[]
  sessions         Session[]
  userAchievements UserAchievement[]
  votes            Vote[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Category {
  id          String           @id @default(cuid())
  name        String           @unique
  description String?
  slug        String           @unique
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  creatorId   String
  creator     User             @relation(fields: [creatorId], references: [id])
  followers   CategoryFollow[]
  posts       Post[]
}

model Post {
  id         String     @id @default(cuid())
  title      String
  content    String
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  userId     String
  categoryId String
  viewCount  Int        @default(0)
  bookmarks  Bookmark[]
  comments   Comment[]
  category   Category   @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  votes      Vote[]
}

model Comment {
  id        String    @id @default(cuid())
  content   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  userId    String
  postId    String
  parentId  String?
  parent    Comment?  @relation("CommentToComment", fields: [parentId], references: [id], onDelete: Cascade)
  children  Comment[] @relation("CommentToComment")
  post      Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  votes     Vote[]
}

model Vote {
  id        String   @id @default(cuid())
  value     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  postId    String?
  commentId String?
  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, postId, commentId])
}

model UserAchievement {
  id            String   @id @default(cuid())
  achievementId String
  unlockedAt    DateTime @default(now())
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, achievementId])
}

model Follow {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  followerId  String
  followingId String
  following   User     @relation("UserFollowing", fields: [followingId], references: [id], onDelete: Cascade)
  follower    User     @relation("UserFollowers", fields: [followerId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
}

model CategoryFollow {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  userId     String
  categoryId String
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, categoryId])
}

model Bookmark {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  userId    String
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
}

model Notification {
  id        String   @id @default(cuid())
  type      String
  content   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  userId    String
  data      String?
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
